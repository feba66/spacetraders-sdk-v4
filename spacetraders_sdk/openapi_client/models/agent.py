# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, constr

class Agent(BaseModel):
    """
    Agent details.  # noqa: E501
    """
    account_id: Optional[constr(strict=True, min_length=1)] = Field(default=None, alias="accountId", description="Account ID that is tied to this agent. Only included on your own agent.")
    symbol: constr(strict=True, max_length=14, min_length=3) = Field(default=..., description="Symbol of the agent.")
    headquarters: constr(strict=True, min_length=1) = Field(default=..., description="The headquarters of the agent.")
    credits: StrictInt = Field(default=..., description="The number of credits the agent has available. Credits can be negative if funds have been overdrawn.")
    starting_faction: constr(strict=True, min_length=1) = Field(default=..., alias="startingFaction", description="The faction the agent started with.")
    ship_count: StrictInt = Field(default=..., alias="shipCount", description="How many ships are owned by the agent.")
    __properties = ["accountId", "symbol", "headquarters", "credits", "startingFaction", "shipCount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Agent:
        """Create an instance of Agent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Agent:
        """Create an instance of Agent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Agent.parse_obj(obj)

        _obj = Agent.parse_obj({
            "account_id": obj.get("accountId"),
            "symbol": obj.get("symbol"),
            "headquarters": obj.get("headquarters"),
            "credits": obj.get("credits"),
            "starting_faction": obj.get("startingFaction"),
            "ship_count": obj.get("shipCount")
        })
        return _obj


