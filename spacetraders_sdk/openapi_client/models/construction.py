# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you cfroman share your projects, ask questions, and get help from other players.

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from .construction_material import ConstructionMaterial


class Construction(BaseModel):
    """
    The construction details of a waypoint.  # noqa: E501
    """

    symbol: StrictStr = Field(default=..., description="The symbol of the waypoint.")
    materials: conlist(ConstructionMaterial) = Field(
        default=..., description="The materials required to construct the waypoint."
    )
    is_complete: StrictBool = Field(default=..., alias="isComplete", description="Whether the waypoint has been constructed.")
    __properties = ["symbol", "materials", "isComplete"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Construction:
        """Create an instance of Construction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in materials (list)
        _items = []
        if self.materials:
            for _item in self.materials:
                if _item:
                    _items.append(_item.to_dict())
            _dict["materials"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Construction:
        """Create an instance of Construction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Construction.parse_obj(obj)

        _obj = Construction.parse_obj(
            {
                "symbol": obj.get("symbol"),
                "materials": (
                    [ConstructionMaterial.from_dict(_item) for _item in obj.get("materials")]
                    if obj.get("materials") is not None
                    else None
                ),
                "is_complete": obj.get("isComplete"),
            }
        )
        return _obj
