# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictStr, confloat, conint, validator
from openapi_client.models.ship_requirements import ShipRequirements

class ShipReactor(BaseModel):
    """
    The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.  # noqa: E501
    """
    symbol: StrictStr = Field(default=..., description="Symbol of the reactor.")
    name: StrictStr = Field(default=..., description="Name of the reactor.")
    description: StrictStr = Field(default=..., description="Description of the reactor.")
    condition: Union[confloat(le=1, ge=0, strict=True), conint(le=1, ge=0, strict=True)] = Field(default=..., description="The repairable condition of a component. A value of 0 indicates the component needs significant repairs, while a value of 1 indicates the component is in near perfect condition. As the condition of a component is repaired, the overall integrity of the component decreases.")
    integrity: Union[confloat(le=1, ge=0, strict=True), conint(le=1, ge=0, strict=True)] = Field(default=..., description="The overall integrity of the component, which determines the performance of the component. A value of 0 indicates that the component is almost completely degraded, while a value of 1 indicates that the component is in near perfect condition. The integrity of the component is non-repairable, and represents permanent wear over time.")
    power_output: conint(strict=True, ge=1) = Field(default=..., alias="powerOutput", description="The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.")
    requirements: ShipRequirements = Field(...)
    __properties = ["symbol", "name", "description", "condition", "integrity", "powerOutput", "requirements"]

    @validator('symbol')
    def symbol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('REACTOR_SOLAR_I', 'REACTOR_FUSION_I', 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I'):
            raise ValueError("must be one of enum values ('REACTOR_SOLAR_I', 'REACTOR_FUSION_I', 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ShipReactor:
        """Create an instance of ShipReactor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of requirements
        if self.requirements:
            _dict['requirements'] = self.requirements.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ShipReactor:
        """Create an instance of ShipReactor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ShipReactor.parse_obj(obj)

        _obj = ShipReactor.parse_obj({
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "condition": obj.get("condition"),
            "integrity": obj.get("integrity"),
            "power_output": obj.get("powerOutput"),
            "requirements": ShipRequirements.from_dict(obj.get("requirements")) if obj.get("requirements") is not None else None
        })
        return _obj


