# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you cfroman share your projects, ask questions, and get help from other players.

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from .survey_deposit import SurveyDeposit


class Survey(BaseModel):
    """
    A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.  # noqa: E501
    """

    signature: constr(strict=True, min_length=1) = Field(
        default=...,
        description="A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.",
    )
    symbol: constr(strict=True, min_length=1) = Field(
        default=..., description="The symbol of the waypoint that this survey is for."
    )
    deposits: conlist(SurveyDeposit) = Field(
        default=...,
        description="A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.",
    )
    expiration: datetime = Field(
        default=...,
        description="The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.",
    )
    size: StrictStr = Field(
        default=...,
        description="The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.",
    )
    __properties = ["signature", "symbol", "deposits", "expiration", "size"]

    @validator("size")
    def size_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("SMALL", "MODERATE", "LARGE"):
            raise ValueError("must be one of enum values ('SMALL', 'MODERATE', 'LARGE')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Survey:
        """Create an instance of Survey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in deposits (list)
        _items = []
        if self.deposits:
            for _item in self.deposits:
                if _item:
                    _items.append(_item.to_dict())
            _dict["deposits"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Survey:
        """Create an instance of Survey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Survey.parse_obj(obj)

        _obj = Survey.parse_obj(
            {
                "signature": obj.get("signature"),
                "symbol": obj.get("symbol"),
                "deposits": (
                    [SurveyDeposit.from_dict(_item) for _item in obj.get("deposits")]
                    if obj.get("deposits") is not None
                    else None
                ),
                "expiration": obj.get("expiration"),
                "size": obj.get("size"),
            }
        )
        return _obj
