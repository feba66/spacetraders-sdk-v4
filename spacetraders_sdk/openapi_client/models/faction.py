# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictBool, conlist, constr
from openapi_client.models.faction_symbol import FactionSymbol
from openapi_client.models.faction_trait import FactionTrait

class Faction(BaseModel):
    """
    Faction details.  # noqa: E501
    """
    symbol: FactionSymbol = Field(...)
    name: constr(strict=True, min_length=1) = Field(default=..., description="Name of the faction.")
    description: constr(strict=True, min_length=1) = Field(default=..., description="Description of the faction.")
    headquarters: constr(strict=True, min_length=1) = Field(default=..., description="The waypoint in which the faction's HQ is located in.")
    traits: conlist(FactionTrait) = Field(default=..., description="List of traits that define this faction.")
    is_recruiting: StrictBool = Field(default=..., alias="isRecruiting", description="Whether or not the faction is currently recruiting new agents.")
    __properties = ["symbol", "name", "description", "headquarters", "traits", "isRecruiting"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Faction:
        """Create an instance of Faction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in traits (list)
        _items = []
        if self.traits:
            for _item in self.traits:
                if _item:
                    _items.append(_item.to_dict())
            _dict['traits'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Faction:
        """Create an instance of Faction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Faction.parse_obj(obj)

        _obj = Faction.parse_obj({
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "headquarters": obj.get("headquarters"),
            "traits": [FactionTrait.from_dict(_item) for _item in obj.get("traits")] if obj.get("traits") is not None else None,
            "is_recruiting": obj.get("isRecruiting")
        })
        return _obj


