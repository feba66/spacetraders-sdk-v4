# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you cfroman share your projects, ask questions, and get help from other players.

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conint, conlist, validator
from .ship_requirements import ShipRequirements


class ShipMount(BaseModel):
    """
    A mount is installed on the exterier of a ship.  # noqa: E501
    """

    symbol: StrictStr = Field(default=..., description="Symbo of this mount.")
    name: StrictStr = Field(default=..., description="Name of this mount.")
    description: Optional[StrictStr] = Field(default=None, description="Description of this mount.")
    strength: Optional[conint(strict=True, ge=0)] = Field(
        default=None,
        description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.",
    )
    deposits: Optional[conlist(StrictStr)] = Field(
        default=None, description="Mounts that have this value denote what goods can be produced from using the mount."
    )
    requirements: ShipRequirements = Field(...)
    __properties = ["symbol", "name", "description", "strength", "deposits", "requirements"]

    @validator("symbol")
    def symbol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in (
            "MOUNT_GAS_SIPHON_I",
            "MOUNT_GAS_SIPHON_II",
            "MOUNT_GAS_SIPHON_III",
            "MOUNT_SURVEYOR_I",
            "MOUNT_SURVEYOR_II",
            "MOUNT_SURVEYOR_III",
            "MOUNT_SENSOR_ARRAY_I",
            "MOUNT_SENSOR_ARRAY_II",
            "MOUNT_SENSOR_ARRAY_III",
            "MOUNT_MINING_LASER_I",
            "MOUNT_MINING_LASER_II",
            "MOUNT_MINING_LASER_III",
            "MOUNT_LASER_CANNON_I",
            "MOUNT_MISSILE_LAUNCHER_I",
            "MOUNT_TURRET_I",
        ):
            raise ValueError(
                "must be one of enum values ('MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I')"
            )
        return value

    @validator("deposits")
    def deposits_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in (
                "QUARTZ_SAND",
                "SILICON_CRYSTALS",
                "PRECIOUS_STONES",
                "ICE_WATER",
                "AMMONIA_ICE",
                "IRON_ORE",
                "COPPER_ORE",
                "SILVER_ORE",
                "ALUMINUM_ORE",
                "GOLD_ORE",
                "PLATINUM_ORE",
                "DIAMONDS",
                "URANITE_ORE",
                "MERITIUM_ORE",
            ):
                raise ValueError(
                    "each list item must be one of ('QUARTZ_SAND', 'SILICON_CRYSTALS', 'PRECIOUS_STONES', 'ICE_WATER', 'AMMONIA_ICE', 'IRON_ORE', 'COPPER_ORE', 'SILVER_ORE', 'ALUMINUM_ORE', 'GOLD_ORE', 'PLATINUM_ORE', 'DIAMONDS', 'URANITE_ORE', 'MERITIUM_ORE')"
                )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ShipMount:
        """Create an instance of ShipMount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of requirements
        if self.requirements:
            _dict["requirements"] = self.requirements.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ShipMount:
        """Create an instance of ShipMount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ShipMount.parse_obj(obj)

        _obj = ShipMount.parse_obj(
            {
                "symbol": obj.get("symbol"),
                "name": obj.get("name"),
                "description": obj.get("description"),
                "strength": obj.get("strength"),
                "deposits": obj.get("deposits"),
                "requirements": (
                    ShipRequirements.from_dict(obj.get("requirements")) if obj.get("requirements") is not None else None
                ),
            }
        )
        return _obj
