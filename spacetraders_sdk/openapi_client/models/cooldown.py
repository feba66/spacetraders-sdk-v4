# coding: utf-8

"""
    SpaceTraders API

    SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you cfroman share your projects, ask questions, and get help from other players.

    The version of the OpenAPI document: 2.0.0
    Contact: joel@spacetraders.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, conint, constr


class Cooldown(BaseModel):
    """
    A cooldown is a period of time in which a ship cannot perform certain actions.  # noqa: E501
    """

    ship_symbol: constr(strict=True, min_length=1) = Field(
        default=..., alias="shipSymbol", description="The symbol of the ship that is on cooldown"
    )
    total_seconds: conint(strict=True, ge=0) = Field(
        default=..., alias="totalSeconds", description="The total duration of the cooldown in seconds"
    )
    remaining_seconds: conint(strict=True, ge=0) = Field(
        default=..., alias="remainingSeconds", description="The remaining duration of the cooldown in seconds"
    )
    expiration: Optional[datetime] = Field(
        default=None, description="The date and time when the cooldown expires in ISO 8601 format"
    )
    __properties = ["shipSymbol", "totalSeconds", "remainingSeconds", "expiration"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Cooldown:
        """Create an instance of Cooldown from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Cooldown:
        """Create an instance of Cooldown from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Cooldown.parse_obj(obj)

        _obj = Cooldown.parse_obj(
            {
                "ship_symbol": obj.get("shipSymbol"),
                "total_seconds": obj.get("totalSeconds"),
                "remaining_seconds": obj.get("remainingSeconds"),
                "expiration": obj.get("expiration"),
            }
        )
        return _obj
